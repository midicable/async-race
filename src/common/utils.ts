/* eslint-disable import/extensions */
/* eslint-disable import/no-unresolved */
import StateManager from '../stateManager/stateManger'
import { ButtonState, InputState } from '../stateManager/states'
import { MAKES_AND_MODELS } from './constants'

const createInput = (
  name: string,
  type: string,
  classList: string[]
): Element => {
  const inputField = document.createElement('input')

  inputField.type = type
  inputField.classList.add(...classList)

  inputField.value = (StateManager.getState(name, 'input') as InputState).value
  inputField.disabled = (
    StateManager.getState(name, 'input') as InputState
  ).disabled

  inputField.addEventListener('change', () => {
    StateManager.setState(name, {
      value: inputField.value,
      disabled: inputField.disabled,
    })
  })

  return inputField
}

const createButton = (
  text: string,
  classList: string[],
  callback: (event: Event) => void,
  initialState: ButtonState
): Element => {
  const button = document.createElement('button')

  button.textContent = text
  button.classList.add(...classList)
  button.disabled = initialState.disabled
  button.addEventListener('click', callback)

  return button
}

const createCarSVG = (carColor: string): string =>
  `
  <svg width="80" height="40" viewBox="0 0 80 40" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M22.0312 6.61875C21.5812 6.73125 21.5375 6.79375 21.4687 7.375C21.4437 7.5625 21.4 7.7625 21.3687 7.81875C21.3437 7.875 20.7625 8.1375 20.0812 8.40625C15.2437 10.3063 11.6562 11.7813 10.0625 12.5375C9.04374 13.0188 8.67499 13.1063 7.43124 13.1875C6.89999 13.2188 6.36874 13.275 6.24999 13.3125C5.61874 13.5125 3.98749 13.675 2.37499 13.7063L1.65624 13.7188L1.36249 14.2188C1.06874 14.7063 1.06874 14.7188 1.18124 14.8438C1.39374 15.0688 1.39999 15.325 1.21249 15.95C1.02499 16.5688 0.999986 17.0625 1.09374 18.2625C1.12499 18.6813 1.11874 18.8125 1.05624 18.8125C0.874986 18.8125 0.537486 19.1625 0.368736 19.525C0.0562357 20.1875 -0.0937643 21.6688 0.0687357 22.4438C0.149986 22.8063 0.149986 22.8313 0.0874857 23.4375C0.0562357 23.775 0.187486 24.925 0.262486 24.9625C0.274986 24.9688 0.443736 25.0875 0.643736 25.2188C1.09999 25.525 1.41249 25.8625 1.46874 26.1125C1.57499 26.6063 2.51249 27.0813 3.68749 27.2438C4.33749 27.3375 9.74374 27.85 10.4812 27.8938L10.6812 27.9063L10.7125 26.9063C10.7562 25.4688 11.025 24.4438 11.625 23.4125C13.3812 20.4188 17.3562 19.2063 20.4062 20.7313C22.3812 21.725 23.7187 23.3813 24.1437 25.3688C24.2812 26.0313 24.325 27.65 24.225 28.6125L24.175 29.125H42.9375C60.7812 29.125 61.7 29.1188 61.6562 29.0125C61.45 28.4688 61.3062 26.9813 61.375 26.1313C61.55 24.1313 62.4812 22.5875 64.2437 21.3875C66.7375 19.6813 69.5375 19.625 72.0125 21.2375C73.5062 22.2188 74.4937 23.6875 74.8875 25.5313C75 26.0563 74.9812 27.6625 74.8562 28.2188C74.8062 28.4563 74.7687 28.6625 74.7812 28.675C74.825 28.725 77.1937 28.55 77.7687 28.4625C78.8937 28.2875 79.35 28.0563 79.6687 27.5125C79.8187 27.2563 79.8437 27.1563 79.8437 26.7188C79.8375 26.4438 79.7875 25.9875 79.7187 25.7C79.6062 25.2063 79.6062 25.15 79.7062 24.5125C79.9 23.2688 79.9562 22.6 79.9625 21.4063C79.9687 20.3063 79.9562 20.1875 79.8187 19.7813C79.5312 18.9375 79.175 18.5938 78.05 18.0688C76.6625 17.4188 74.0937 16.6938 70.75 16.0063C67.4812 15.3313 61.225 14.6938 57.9125 14.6875H56.4812L55.0062 13.8188C49.925 10.8375 45.05 8.29375 43.4312 7.78125C40.3187 6.8 33.4437 6.5625 25.3562 7.15625L24.1812 7.24375L23.8875 7.05625C23.3125 6.69375 22.4937 6.5 22.0312 6.61875ZM33.9812 8.5625C34.0625 8.84375 34.3437 10.4688 34.5312 11.7813C34.7375 13.1938 34.9937 15.15 34.975 15.1688C34.9312 15.2125 24.525 14.9188 22.1375 14.8063C19.9062 14.7063 19.2375 14.4563 18.5562 13.4625C18.1687 12.8938 18.0125 12.0563 18.1875 11.425C18.2625 11.175 18.5375 10.9625 19.3875 10.5C21.6937 9.2625 24.3812 8.69375 29.5 8.375C31.0375 8.28125 31.3125 8.275 32.6875 8.275L33.9 8.28125L33.9812 8.5625ZM38.0375 8.5C40.4312 8.725 42.5187 9.0375 43.875 9.36875C45.1875 9.69375 46.6937 10.3875 48.375 11.4438C49.2562 11.9938 50.7437 13.0625 50.75 13.1375C50.75 13.1688 50.6625 13.1875 50.55 13.1875C50.25 13.1875 49.8375 13.4188 49.675 13.675C49.525 13.9188 49.4875 14.3813 49.5812 14.8563L49.6375 15.125H43.9875H38.3375L37.2375 11.75L36.1437 8.375H36.4375C36.5937 8.375 37.3187 8.43125 38.0375 8.5Z" fill="${carColor}"/>
  <path d="M16.3562 20.4687C13.6625 20.9812 11.5187 23.2187 11.1187 25.9375C11.0125 26.6687 11.075 27.7625 11.2687 28.5C11.975 31.225 14.375 33.1937 17.1875 33.3562C20.3562 33.5375 23.1812 31.4 23.9125 28.275C24.0875 27.5437 24.075 26.1 23.8875 25.3562C23.3 22.9937 21.4937 21.1687 19.1375 20.5562C18.4812 20.3875 17.0375 20.3437 16.3562 20.4687ZM18.7187 22.4062C19.2437 22.5375 20.025 22.9375 20.4687 23.2937C21.1937 23.8812 21.7812 24.8062 22.0375 25.75C22.1812 26.2937 22.1875 27.375 22.0375 27.9687C21.675 29.45 20.525 30.7125 19.0812 31.2125C15.7625 32.375 12.3687 29.4812 13.025 26.0375C13.2125 25.0875 13.6125 24.325 14.3125 23.625C15.0062 22.9375 15.7937 22.5125 16.7187 22.3375C17.2437 22.2375 18.1875 22.2687 18.7187 22.4062Z" fill="${carColor}"/>
  <path d="M18.2375 23.95C18.25 24.5125 18.2813 24.9938 18.3125 25.025C18.4188 25.1313 18.9875 24.6625 19.5688 23.9875L19.8875 23.6313L19.5875 23.4375C19.2625 23.2313 18.7688 23.0313 18.4313 22.9688L18.2188 22.9313L18.2375 23.95Z" fill="${carColor}"/>
  <path d="M16.1937 23.125C15.8062 23.2625 15.15 23.6375 15.1687 23.7125C15.1875 23.7937 16.65 25.0625 16.725 25.0625C16.7687 25.0625 16.8187 25.0187 16.8375 24.9625C16.8875 24.8375 16.8875 24.1687 16.8312 23.5125C16.7875 22.9187 16.7812 22.9125 16.1937 23.125Z" fill="${carColor}"/>
  <path d="M20.0562 25.2813C19.7 25.6813 19.4 26.05 19.3875 26.1C19.35 26.2563 19.675 26.3188 20.3687 26.2813C20.7312 26.2625 21.125 26.2313 21.2375 26.2125C21.4437 26.1813 21.45 26.175 21.4062 25.95C21.3625 25.675 21.0062 24.9063 20.8312 24.6938L20.7125 24.5438L20.0562 25.2813Z" fill="${carColor}"/>
  <path d="M14.125 24.9437C13.9313 25.2187 13.7 25.775 13.6438 26.1062L13.6063 26.3125H14.575C15.6063 26.3125 15.8313 26.2562 15.7063 26.0375C15.625 25.8875 14.4313 24.6875 14.3688 24.6875C14.3375 24.6875 14.2313 24.8 14.125 24.9437Z" fill="${carColor}"/>
  <path d="M17.4125 25.2875C17.1875 25.5063 17.4125 25.8313 17.6875 25.6875C17.85 25.6 17.85 25.3375 17.6937 25.25C17.5375 25.1688 17.525 25.1688 17.4125 25.2875Z" fill="${carColor}"/>
  <path d="M17.1938 26.3375C16.8375 26.5375 16.7688 27.0313 17.0563 27.3188C17.325 27.5813 17.6875 27.5875 17.95 27.325C18.2125 27.0625 18.2063 26.7 17.9438 26.4313C17.7375 26.2313 17.4563 26.1938 17.1938 26.3375Z" fill="${carColor}"/>
  <path d="M16 26.65C15.8812 26.7938 15.95 27.0313 16.1125 27.05C16.3875 27.0938 16.5312 26.85 16.3375 26.6625C16.2187 26.5375 16.1 26.5375 16 26.65Z" fill="${carColor}"/>
  <path d="M18.7625 26.725C18.5937 26.8438 18.5875 26.95 18.7437 27.0875C18.9 27.2313 19.125 27.125 19.125 26.9063C19.125 26.7 18.9375 26.6 18.7625 26.725Z" fill="${carColor}"/>
  <path d="M14.0312 27.5438C13.55 27.5813 13.5562 27.575 13.6625 27.95C13.7625 28.2938 14.0437 28.8625 14.2375 29.1125L14.35 29.2563L14.9937 28.4938C15.35 28.075 15.6437 27.6875 15.65 27.6313C15.6562 27.5438 15.5625 27.5313 15 27.525C14.6375 27.525 14.2062 27.5313 14.0312 27.5438Z" fill="${carColor}"/>
  <path d="M19.7812 27.6187C19.5062 27.6437 19.4 27.6812 19.3875 27.7562C19.3687 27.8562 20.7 29.1875 20.8125 29.1875C20.95 29.1875 21.35 28.3062 21.4687 27.7625L21.5125 27.5625L20.8312 27.575C20.4625 27.5812 19.9875 27.6 19.7812 27.6187Z" fill="${carColor}"/>
  <path d="M17.35 28.0375C17.2312 28.15 17.2312 28.1625 17.3125 28.3187C17.35 28.3875 17.4437 28.4375 17.5312 28.4375C17.6562 28.4375 17.8125 28.2875 17.8125 28.1625C17.8125 28.1 17.6125 27.9375 17.5312 27.9375C17.4875 27.9375 17.4 27.9812 17.35 28.0375Z" fill="${carColor}"/>
  <path d="M16.1812 29.1062C15.6437 29.6687 15.3125 30.05 15.3125 30.1187C15.3125 30.275 16.4312 30.75 16.7875 30.75H16.9562L16.9125 29.8562C16.8562 28.8187 16.8312 28.6875 16.6937 28.6875C16.6375 28.6875 16.4062 28.875 16.1812 29.1062Z" fill="${carColor}"/>
  <path d="M18.35 28.7438C18.3125 28.8063 18.2 29.7938 18.1688 30.3563C18.15 30.7313 18.1563 30.75 18.2875 30.75C18.7813 30.75 19.925 30.325 19.8375 30.175C19.8063 30.1313 19.5063 29.775 19.1625 29.3875C18.5813 28.7313 18.4313 28.6125 18.35 28.7438Z" fill="${carColor}"/>
  <path d="M67.0188 20.4688C65.0313 20.8313 63.2875 22.1313 62.375 23.9375C60.9813 26.6938 61.7625 30.1625 64.1813 31.9875C64.8813 32.5125 65.3563 32.7688 66.125 33.025C67.8375 33.5938 69.5313 33.4625 71.1375 32.6438C74.5875 30.8813 75.7313 26.5 73.5875 23.2688C72.1813 21.15 69.5188 20.0125 67.0188 20.4688ZM69.425 22.4375C71.6 23.05 73.0438 25.2063 72.75 27.4125C72.3313 30.5875 69.025 32.3875 66.1563 31C64.6625 30.275 63.6813 28.8 63.5813 27.125C63.4563 25.0313 64.7813 23.125 66.8063 22.4688C67.5688 22.2188 68.6125 22.2063 69.425 22.4375Z" fill="${carColor}"/>
  <path d="M68.8562 23.95C68.875 24.5125 68.9125 24.9937 68.9437 25.025C69.025 25.1125 69.275 24.9125 69.9125 24.2625L70.5062 23.6562L70.3625 23.5437C70.05 23.2937 69.1812 22.9375 68.8937 22.9375C68.8312 22.9375 68.825 23.1437 68.8562 23.95Z" fill="${carColor}"/>
  <path d="M66.9063 23.0875C66.5938 23.1875 66.075 23.45 65.8875 23.6L65.7438 23.7187L66.5 24.3875C66.9188 24.7625 67.3 25.0625 67.3438 25.0625C67.4875 25.0625 67.5125 24.8187 67.4688 23.9C67.4188 22.8875 67.4438 22.9187 66.9063 23.0875Z" fill="${carColor}"/>
  <path d="M70.6688 25.2875C70.3 25.6938 70 26.075 70 26.1375C70 26.2063 70.0688 26.25 70.2375 26.275C70.5125 26.3188 71.975 26.2313 72.0438 26.1688C72.1375 26.0688 71.725 25.025 71.4563 24.6938L71.3375 24.5438L70.6688 25.2875Z" fill="${carColor}"/>
  <path d="M64.7625 24.9187C64.5187 25.3062 64.325 25.7562 64.275 26.0687L64.2312 26.3125H65.1812C65.7187 26.3125 66.1875 26.2812 66.2562 26.25C66.3625 26.1875 66.3687 26.1687 66.2875 26.0125C66.2375 25.9187 65.9187 25.5687 65.575 25.2312L64.9562 24.6125L64.7625 24.9187Z" fill="${carColor}"/>
  <path d="M68.05 25.2563C67.9 25.3438 67.9062 25.6063 68.0625 25.6875C68.3375 25.8313 68.5625 25.5063 68.3375 25.2875C68.225 25.1688 68.1937 25.1688 68.05 25.2563Z" fill="${carColor}"/>
  <path d="M67.8187 26.3312C67.5125 26.5125 67.4062 26.9625 67.6 27.2437C67.6562 27.325 67.8 27.425 67.9125 27.475C68.0937 27.55 68.1562 27.55 68.3375 27.475C68.9562 27.2187 68.8687 26.35 68.2187 26.275C68.0687 26.2562 67.9062 26.2812 67.8187 26.3312Z" fill="${carColor}"/>
  <path d="M66.625 26.65C66.5062 26.7938 66.575 27.0313 66.7375 27.05C67.0125 27.0938 67.1562 26.85 66.9625 26.6625C66.8437 26.5375 66.725 26.5375 66.625 26.65Z" fill="${carColor}"/>
  <path d="M69.35 26.725C69.2938 26.775 69.25 26.8625 69.25 26.9062C69.25 26.9875 69.4125 27.1875 69.475 27.1875C69.6 27.1875 69.75 27.0312 69.75 26.9062C69.75 26.8187 69.7 26.725 69.6313 26.6875C69.475 26.6062 69.4625 26.6062 69.35 26.725Z" fill="${carColor}"/>
  <path d="M64.5937 27.5563C64.2187 27.5938 64.2187 27.5938 64.2375 27.7813C64.2937 28.2125 64.8875 29.3313 65 29.2125C65.3562 28.8313 66.3125 27.65 66.2937 27.6C66.2687 27.525 65.1937 27.4938 64.5937 27.5563Z" fill="${carColor}"/>
  <path d="M70.4188 27.6062C69.9938 27.6375 69.925 27.725 70.125 27.9812C70.2688 28.175 71.375 29.1875 71.4375 29.1875C71.4563 29.1875 71.5625 29.0375 71.6688 28.8562C71.85 28.5562 71.9938 28.1625 72.0875 27.7312L72.125 27.5625L71.4563 27.575C71.0813 27.5812 70.6188 27.5937 70.4188 27.6062Z" fill="${carColor}"/>
  <path d="M67.9375 28.0625C67.8375 28.2562 67.9625 28.45 68.175 28.425C68.3062 28.4125 68.35 28.3687 68.3625 28.225C68.3937 27.9437 68.0687 27.8187 67.9375 28.0625Z" fill="${carColor}"/>
  <path d="M66.5687 29.3562C66.2187 29.725 65.9375 30.0625 65.9375 30.1062C65.9375 30.2812 67.0125 30.75 67.4187 30.75H67.5812L67.5375 29.9812C67.475 28.8625 67.4437 28.6875 67.3125 28.6875C67.25 28.6875 66.9187 28.9875 66.5687 29.3562Z" fill="${carColor}"/>
  <path d="M68.9687 28.7437C68.925 28.8187 68.825 29.6437 68.7875 30.2625C68.7625 30.7437 68.7625 30.75 68.9062 30.75C69.1875 30.75 69.7187 30.6125 70.1125 30.4312L70.5125 30.25L70.3937 30.1062C69.9875 29.5937 69.1562 28.6875 69.0875 28.6875C69.0437 28.6875 68.9937 28.7125 68.9687 28.7437Z" fill="${carColor}"/>
  </svg>  
  `

const createRandomCarName = (): string => {
  const randomMakeNumber = Math.floor(Math.random() * 10)
  const randomModelNumber = Math.floor(Math.random() * 9)

  const make = Array.from(MAKES_AND_MODELS.keys())[randomMakeNumber]
  const model = (MAKES_AND_MODELS.get(make) as string[])[randomModelNumber]

  return `${make} ${model}`
}

const createRandomCarColor = (): string => {
  const SIX_HEX_DIGITS_TOTAL_COMBINATIONS = 16 ** 6

  return `#${Math.floor(
    Math.random() * SIX_HEX_DIGITS_TOTAL_COMBINATIONS
  ).toString(16)}`
}

export {
  createButton,
  createInput,
  createCarSVG,
  createRandomCarName,
  createRandomCarColor,
}
